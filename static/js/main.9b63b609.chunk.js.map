{"version":3,"sources":["common/components/GlobalComponent.tsx","common/components/DropdownList.tsx","sort/algorithm/bubble/components/VerticalLine.tsx","sort/algorithm/bubble/components/HorizontalList.tsx","utils/utils.ts","sort/algorithm/bubble/screens/BubbleSortScreen.tsx","styles/Colors.ts","styles/Themes.ts","common/components/Input.tsx","Main.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","header","theme","colors","surface","Content","background","Footer","footer","HeaderTitle","h1","onSurface","ToolBar","DropDown","select","DropDownItem","option","SortVisualizerContainer","Input","input","PrimaryButton","button","primary","onPrimary","DropdownList","props","onChange","e","target","value","dropdownList","map","item","id","name","VerticalLine","attrs","height","width","isSelected","style","secondary","HorizontalList","sleep","ms","Promise","resolve","setTimeout","generateRandomNumbers","max","limit","isNaN","randomArray","Array","i","data","Math","floor","random","key","toString","safeParseInt","num","defaultValue","parseInt","BubbleSortScreen","maxValue","datasetMaxValue","screenHeight","console","log","useState","dataset","setData","swapIndices","setSwapIndices","isComponentActive","useRef","cleanupCallback","useCallback","current","useEffect","initiateBubbleSort","a","swapIndex1","swapIndex2","length","isSwapOccured","j","temp","slice","executionDelayInMillis","index","arr","onClick","LightColors","onBackground","onSecondary","DarkColors","getTheme","ToolbarNumberInput","sortAlgorithmList","require","getSortingVisualizerScreen","sortAlgorithmId","screenWidth","App","setTheme","setSortAlgorithmId","setDatasetMaxValue","datasetLength","setDatasetLength","setExecutionDelayInMillis","setDataset","contentHeight","setContentHeight","contentWidth","setContentWidth","contentRef","clientHeight","clientWidth","currentTheme","title","placeholder","type","maxLength","min","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b63b609.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-flow: column nowrap;\n`;\n\nconst Header = styled.header`\n  background-color: ${({ theme }) => theme.colors.surface};\n`;\n\nconst Content = styled.div`\n  background-color: ${({ theme }) => theme.colors.background};\n  flex: 1;\n  flex-flow: column;\n`;\n\nconst Footer = styled.footer`\n  background-color: ${({ theme }) => theme.colors.surface};\n`;\n\nconst HeaderTitle = styled.h1`\n  color: ${({ theme }) => theme.colors.onSurface};\n  text-align: center;\n`;\n\nconst ToolBar = styled.div`\n  background-color: ${({ theme }) => theme.colors.surface};\n  flex-direction: row;\n  display: flexbox;\n\n  align-items: center;\n\n  padding: 8px;\n`;\n\nconst DropDown = styled.select`\n  padding: 8px;\n  font-size: 16px;\n\n  background-color: ${({ theme }) => theme.colors.surface};\n  color: ${({ theme }) => theme.colors.onSurface};\n  outline: none;\n\n  :hover {\n    opacity: 0.85;\n  }\n`;\nconst DropDownItem = styled.option``;\n\nconst SortVisualizerContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst Input = styled.input`\n  font-size: 16px;\n  padding: 8px;\n\n  background-color: ${({ theme }) => theme.colors.surface};\n  color: ${({ theme }) => theme.colors.onSurface};\n  border-width: 1px;\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.onSurface};\n  }\n  :hover {\n    opacity: 0.85;\n  }\n\n  outline: none;\n`;\n\nconst PrimaryButton = styled.button`\n  font-size: 16px;\n  padding: 8px;\n  min-width: 75px;\n  background-color: ${({ theme }) => theme.colors.primary};\n  color: ${({ theme }) => theme.colors.onPrimary};\n\n  :hover {\n    opacity: 0.85;\n  }\n`;\n\nexport {\n  Container,\n  Header,\n  HeaderTitle,\n  Content,\n  Footer,\n  ToolBar,\n  DropDown,\n  DropDownItem,\n  SortVisualizerContainer,\n  Input,\n  PrimaryButton,\n};\n","import React, { FunctionComponent, PropsWithChildren } from \"react\";\nimport { DropDown, DropDownItem } from \"./GlobalComponent\";\n\ntype Item = {\n  id: string;\n  name: string;\n};\n\ntype Props = {\n  dropdownList: Array<Item>;\n  title: string;\n  onChange?: (id: string) => void | null;\n};\n\nconst DropdownList: FunctionComponent<Props> = (\n  props: PropsWithChildren<Props>\n) => {\n  return (\n    <DropDown\n      onChange={(e) => {\n        props.onChange?.(e.target.value);\n      }}\n    >\n      {props.dropdownList.map((item) => (\n        <DropDownItem key={item.id} value={item.id}>\n          {item.name}\n        </DropDownItem>\n      ))}\n    </DropDown>\n  );\n};\n\nexport default DropdownList;\n","import styled from \"styled-components\";\n\ntype VerticalLineProp = {\n  height: any;\n  width: any;\n  isSelected: boolean;\n};\n\nconst VerticalLine = styled.div.attrs((props: VerticalLineProp) => ({\n  height: props.height,\n  width: props.width,\n  isSelected: props.isSelected,\n  style: {\n    height: props.height,\n    width: props.width,\n  },\n}))`\n  background-color: ${({ theme, isSelected }) =>\n    isSelected ? theme.colors.primary : theme.colors.secondary};\n  margin-left: 0.1%;\n  margin-right: 0.1%;\n  display: flex;\n`;\n\nexport default VerticalLine;\n","import styled from \"styled-components\";\n\nconst HorizontalList = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: flex-end;\n  padding: 8px;\n`;\n\nexport default HorizontalList;\n","import ArrayData from \"../sort/types/ArrayData\";\n\nconst sleep = (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nconst generateRandomNumbers = (\n  max: number,\n  limit: number\n): Array<ArrayData> => {\n  if (max <= 0 || limit <= 0 || isNaN(max) || isNaN(limit)) return [];\n\n  const randomArray = new Array<ArrayData>(limit);\n  for (let i = 0; i < limit; i++) {\n    randomArray[i] = {\n      data: Math.floor(Math.random() * max),\n      key: i.toString(),\n    };\n  }\n  return randomArray;\n};\n\nconst safeParseInt = (num: string, defaultValue: number = 0) => {\n  try {\n    return parseInt(num);\n  } catch (e: any) {\n    return defaultValue;\n  }\n};\n\nexport { sleep, generateRandomNumbers, safeParseInt };\n","import React, {\n  PropsWithChildren,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport VerticalLine from \"../components/VerticalLine\";\nimport HorizontalList from \"../components/HorizontalList\";\nimport {\n  PrimaryButton,\n  SortVisualizerContainer,\n} from \"../../../../common/components/GlobalComponent\";\nimport SortVisualizerScreenProp from \"../../../types/SortVisualizerScreenProp\";\nimport { sleep } from \"../../../../utils/utils\";\nimport ArrayData from \"../../../types/ArrayData\";\n\nconst BubbleSortScreen = (\n  props: PropsWithChildren<SortVisualizerScreenProp>\n) => {\n  const maxValue = Math.max(props.datasetMaxValue, props.screenHeight);\n\n  console.log(\"Component re-render\");\n\n  const [data, setData] = useState<Array<ArrayData>>(props.dataset);\n\n  const [swapIndices, setSwapIndices] = useState([-1, -1]);\n\n  const isComponentActive = useRef<boolean>(false);\n\n  const cleanupCallback = useCallback(() => {\n    console.log(\"Cleaning up bubble sort screen\");\n    isComponentActive.current = false;\n  }, []);\n\n  useEffect(() => {\n    setData(props.dataset);\n    isComponentActive.current = true;\n    return cleanupCallback;\n  }, [cleanupCallback, props.dataset]);\n\n  const initiateBubbleSort = async () => {\n    console.log(\"Initated bubble sort\");\n\n    let swapIndex1 = 1;\n    let swapIndex2 = -1;\n\n    for (let i = 0; i < data.length && isComponentActive.current; i++) {\n      let isSwapOccured = false;\n      for (let j = 0; j < data.length - 1 && isComponentActive.current; j++) {\n        if (data[j].data > data[j + 1].data) {\n          const temp = data[j];\n          data[j] = data[j + 1];\n          data[j + 1] = temp;\n\n          isSwapOccured = true;\n          swapIndex1 = j;\n          swapIndex2 = j + 1;\n\n          console.log(\n            \"Running swapping elements swapIndex1 \" +\n              swapIndex1 +\n              \" swapIndex2 \" +\n              swapIndex2\n          );\n        }\n\n        if (isSwapOccured) {\n          setData((a) => data.slice());\n          setSwapIndices([swapIndex1, swapIndex2]);\n          await sleep(props.executionDelayInMillis);\n        }\n      }\n      if (!isSwapOccured) break;\n    }\n  };\n\n  return (\n    <SortVisualizerContainer>\n      <HorizontalList>\n        {data.map((item, index, arr) => (\n          <VerticalLine\n            key={item.key}\n            height={(item.data / maxValue) * 100 + \"%\"}\n            width={\"50px\"}\n            isSelected={index === swapIndices[0] || index === swapIndices[1]}\n          />\n        ))}\n      </HorizontalList>\n\n      <PrimaryButton onClick={() => initiateBubbleSort()}>\n        Start sorting\n      </PrimaryButton>\n    </SortVisualizerContainer>\n  );\n};\n\nexport default BubbleSortScreen;\n","export type Colors = {\n  background: string;\n  surface: string;\n  primary: string;\n  secondary: string;\n  onBackground: string;\n  onSurface: string;\n  onPrimary: string;\n  onSecondary: string;\n};\n\nconst LightColors = {\n  background: \"#FFFFFF\",\n  surface: \"#FFFFFF\",\n  primary: \"#6200EE\",\n  secondary: \"#03DAC6\",\n  onBackground: \"#000000\",\n  onSurface: \"#000000\",\n  onPrimary: \"#FFFFFF\",\n  onSecondary: \"#000000\",\n};\n\nconst DarkColors = {\n  background: \"#121212\",\n  surface: \"#121212\",\n  primary: \"#BBB6FC\",\n  secondary: \"#03DAC6\",\n  onBackground: \"#FFFFFF\",\n  onSurface: \"#FFFFFF\",\n  onPrimary: \"#000000\",\n  onSecondary: \"#000000\",\n};\n\nexport { LightColors, DarkColors };\n","import { LightColors, DarkColors, Colors } from \"./Colors\";\nimport { DefaultTheme } from \"styled-components\";\n\ndeclare module \"styled-components\" {\n  export interface DefaultTheme {\n    theme: string;\n    colors: Colors;\n  }\n}\n\nexport const getTheme = (theme: string): DefaultTheme => {\n  return { theme: theme, colors: theme === \"dark\" ? DarkColors : LightColors };\n};\n","import styled from \"styled-components\";\nimport { Input } from \"./GlobalComponent\";\n\nconst ToolbarNumberInput = styled(Input)`\n  margin: 8px;\n`;\n\nexport default ToolbarNumberInput;\n","import { useState, useRef, useEffect } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport {\n  Header,\n  HeaderTitle,\n  Content,\n  Footer,\n  Container,\n  ToolBar,\n  PrimaryButton,\n} from \"./common/components/GlobalComponent\";\nimport DropdownList from \"./common/components/DropdownList\";\nimport BubbleSortScreen from \"./sort/algorithm/bubble/screens/BubbleSortScreen\";\nimport { getTheme } from \"./styles/Themes\";\nimport { generateRandomNumbers, safeParseInt } from \"./utils/utils\";\nimport ArrayData from \"./sort/types/ArrayData\";\nimport ToolbarNumberInput from \"./common/components/Input\";\n\nconst sortAlgorithmList = require(\"./assets/sort_algorithm_list.json\");\n\nconst App = () => {\n  const [theme, setTheme] = useState(\"dark\");\n  const [sortAlgorithmId, setSortAlgorithmId] = useState(\"1\");\n\n  const [datasetMaxValue, setDatasetMaxValue] = useState(1000);\n  const [datasetLength, setDatasetLength] = useState(10);\n  const [executionDelayInMillis, setExecutionDelayInMillis] = useState(50);\n\n  const [dataset, setDataset] = useState<Array<ArrayData>>(\n    generateRandomNumbers(datasetMaxValue, datasetLength)\n  );\n\n  const [contentHeight, setContentHeight] = useState(0);\n  const [contentWidth, setContentWidth] = useState(0);\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const height = contentRef?.current?.clientHeight;\n    setContentHeight(height ? height : 0);\n\n    const width = contentRef?.current?.clientWidth;\n    setContentWidth(width ? width : 0);\n\n    setDataset(generateRandomNumbers(datasetMaxValue, datasetLength));\n\n    console.log(\"Height \" + height + \" Width \" + width);\n  }, [contentRef, datasetMaxValue, datasetLength]);\n\n  const toggleTheme = () => {\n    setTheme((currentTheme) => (currentTheme === \"dark\" ? \"light\" : \"dark\"));\n  };\n\n  const generateNewDataset = () => {\n    setDataset(generateRandomNumbers(datasetMaxValue, datasetLength));\n  };\n\n  return (\n    <ThemeProvider theme={getTheme(theme)}>\n      <Container>\n        <Header>\n          <HeaderTitle onClick={toggleTheme}>\n            Sorting algorithem visualizer\n          </HeaderTitle>\n        </Header>\n        <ToolBar>\n          <DropdownList\n            dropdownList={sortAlgorithmList}\n            title=\"Select a sorting algorithm\"\n            onChange={setSortAlgorithmId}\n          />\n\n          <ToolbarNumberInput\n            placeholder={\"Max value\"}\n            type={\"number\"}\n            maxLength={10}\n            onChange={(e) =>\n              setDatasetMaxValue(\n                Math.min(safeParseInt(e.target.value), 999999999)\n              )\n            }\n            value={datasetMaxValue}\n          />\n          <ToolbarNumberInput\n            placeholder={\"Number of data\"}\n            type={\"number\"}\n            maxLength={5}\n            onChange={(e) =>\n              setDatasetLength(Math.min(safeParseInt(e.target.value), 99999))\n            }\n            value={datasetLength}\n          />\n          <ToolbarNumberInput\n            placeholder={\"Execution delay in ms\"}\n            type={\"number\"}\n            maxLength={4}\n            onChange={(e) =>\n              setExecutionDelayInMillis(\n                Math.min(safeParseInt(e.target.value), 9999)\n              )\n            }\n            value={executionDelayInMillis}\n          />\n          <PrimaryButton onClick={generateNewDataset}>\n            Generate new dataset\n          </PrimaryButton>\n        </ToolBar>\n        <Content ref={contentRef}>\n          {dataset &&\n            getSortingVisualizerScreen(\n              sortAlgorithmId,\n              dataset,\n              datasetMaxValue,\n              contentHeight,\n              contentWidth,\n              executionDelayInMillis\n            )}\n        </Content>\n\n        <Footer>\n          <HeaderTitle>Footer</HeaderTitle>\n        </Footer>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nconst getSortingVisualizerScreen = (\n  sortAlgorithmId: string,\n  dataset: Array<ArrayData>,\n  datasetMaxValue: number,\n  height: number,\n  width: number,\n  executionDelayInMillis: number\n) => {\n  switch (sortAlgorithmId) {\n    case \"1\":\n      return (\n        <BubbleSortScreen\n          name=\"Bubble sort\"\n          dataset={dataset}\n          screenHeight={height}\n          screenWidth={width}\n          datasetMaxValue={datasetMaxValue}\n          executionDelayInMillis={executionDelayInMillis}\n        />\n      );\n    case \"2\":\n      return <HeaderTitle>Selection sort</HeaderTitle>;\n    case \"3\":\n      return (\n        <BubbleSortScreen\n          name=\"Quick sort\"\n          dataset={dataset}\n          screenHeight={height}\n          screenWidth={width}\n          datasetMaxValue={datasetMaxValue}\n          executionDelayInMillis={executionDelayInMillis}\n        />\n      );\n    default:\n      return <HeaderTitle>Please select a valid sorting algorithm</HeaderTitle>;\n  }\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}